lle de specifikke spørgsmål kan besvares via projektet Period1Callbacks

1 - Explain differences between Java and JavaScript. Include both topics related to the fact
that Java is af compiled language and JavaScript a scripted language and generel differencies in features

Java:
Compiled language - er hurtigere end scripted language, fejl i syntaks vises før programmet afvikles, giver codecompletion, 
er strongly typed hvilket betyder at en variabel ikke kan skifte type, opererer med klasser
a strongly typed language is more likely to generate an error or refuse to compile if the argument passed to a function 
does not closely match the expected type.
Variabaler kan pege på objekter
Objekter kan passes som parametre til metoder
Objekter kan returneres fra metoder
Vi kan bruges nestede klasser

JavaScript:
Loosely typed - a very weakly typed language may produce unpredictable results or may perform implicit type conversion
fejlbeskeder først ved afvikling af programmet
har ikke klasser frø ECMASCRIPT6
objekter dannes ved at skrive var a = {fname: "Kurt"} eller via konstruktør var b = new Person()
Variabler kan pege på funktioner
Vi kan passe funktioner som parametre
Vi kan returnere funktioner fra funktioner
Vi kan have nestede funktioner


2 - Explain the use of strict

hvis man ikke anvender syntaksen var før variabelnavn når den erklæres bliver den til en global variabel.
Use strict i toppen af din kode enten alene som  'use strict' eller i <script> tag forhindrer dette idet, at alle
variabler skal erklæres før de anvendes...det er således ikke muligt at sige x=5; med mindre der tidligere er sat/erklæret en var x;

3 - Variable/function hoisting

Er defautl nårJavaScripts flytter erklæringer til toppen af koden/scope. Hoister kun erklæringen ikke initieringen

det er altid en god regel at erklære varibaler i toppen for at undgå bugs.

4 - this in JavaScript and how it differs from what we know from Jave/.net
JavaScript - this - er objekter der ejer JavaScriptkoden. Værdien af this i en funktion er objektet der ejer funktonen.
værdien af this i et objekt er objektet selv.
keyword this i en konstruktør har ingen værdi, men er en erstatning for et nyt objekt der instantieres (new),
hvorefter værdien bliver det nye objekt.
binding er explicit
Hvis du bruger this udenfor en funktion i koden refereres til dokumentet/window
//purpose of methods call(), apply(), bind()
    //apply (der tager en et array af argumenter) og call (der tager en liste af argumenter) er metoder til explicit binding..
    .dvs sætte værdien af this

Java - this - binding er implecit. Indenfor en instans, metode eller konstruktør er this en reference til det nuværende objekt
- altså det objekt hvis metode eller konstruktør der er blevet kaldt. 
du kan referere til ethvert medlem af nuværende objekt fra en instans, metode eller konstruktør med this.

var self = this på 3. semester:
selv er her brugt til at vedligeholde en reference til den original this selvom konteksten ændrer sig. Bliver ofte brugt i 
eventhandlere og closures.


5 - Immediately-invoked function expressions(IIFE
Kan bruges til at undgå hoisting indenfor en kodeblok, beskytte mod forurening af koden og samtidig tillade public acces til metoder
mens varibaler stadig er private i disse metoder....
eksempel
(function () {
    var x = "Hello!!";      // I will invoke myself
    console.log(x);
})();
bemærk her at der er parantes rundt om hele funktionen og den afsltutes med dobbelte paranteser() - det er på denne måde 
du kan se at det er en IIFE.

6 - Use the debugger to explain the basic things all objects inherits from object
I debuggeren ses alle de metoder som ligger i Object() og som ethvert objekt arver.

7 - user defined callback functions
Et callback er et stykke eksekverbar kode som er passed som et argument til anden kode og som forventes at callback og 
eksekvere kodestumpen. dette kan ske synkront og asynkront.

8 - Function Closures and the JavaScript Module Pattern
En Closure kombinerer en funktion med det miljø den er skrevet i.
java - en variabel lever kun indtil final statement er afviklet i metoden.
i javascript - bruger vi closures - en funktion returnerer en anden funktion der refererer til noget i den ydre funktion - 
så kan den huske værdien af variablerne.
Module pattern  
her kan du lave private variabler
bruges i factory i Angular
bruges i Node i module exports

9 - JavaScript prototyping
Brug gerne array map tingen i Period1Callbacks til at forklare dette
Hver konstruktør har en prototype property der refererer til et objekt og det objekt bliver prototype for alle de instanser 
der bliver kreeret. Vi kan tilføje metoder og properties til denne prototype - herunder har vi et objekt Car og tilføjer en 
metode showCar til objektets prototype. Alle instanser af dette objekt har nu mulighed for at anvende funktionen.
function Car(make, model, year){
this. make = make;
this.model = model;
this.year = year;
}
Car.prototype.showCar= function(){
console.log("A beautyfull "+this.year+" "+this.model+" "+this.make)
}
//create instanses of Car
var car1 = new Car("Volvo", "V70", 2005);
car1.showCar();

f. eks. Array - her ligger forEach som en del af 
det objektet kan - og du kan tilføje til det ved at skrive Array.prototype.myForEach = myForEach
OBS for arv eksemplet på prototype - prototype_inheritance.js


10 - Generally about node.js and NPM
En platform til at bygge nemme scalable netværks applikationer der er hurtige. Runtime environment and library 
for running JavaScript outside the browser.
Er event driven
Har non blocking I/O model - letvægt og effektiv
Til data intensive real time applikationer der afvikles på distribuerede services (mange servere)
Based på Googles V8 engine
Rettet mod asynkron programmering
Nem at scalere
Node kan anvendes på client, på server og på database - one in all...
Perfekt til single page applications
Egnet til applikationer med meget I/O, Real time programs, Web servere, REST servere, Streaming servere, Games
IKKE egnet til CPU intensive applikationer

NPM - Node Package Manager
online repository hvor der er publiceret open source Node.js projekter
Er udvidelser til Node som er udviklet af hvem som helst og kan anvendes frit - ligesom imports i Java
Det er muligt at installere pakker både lokalt i det enkelte projekt og globalt på computeren

11 - Examples of user defined reusable modules implemented in Node.js
Reusable modules = module.exports i en js. fil og det betyder, at den funktion der er eksporteret kan anvendes i andre
filer blot med require filen og bruge funktionen - se eksempel fra learnYouNode
var printfiles = function() {
    fs.readdir(path, function (err, list) {
        list.forEach(function (file) {
            if (path.extname(file) === '.' + process.argv[3])
                console.log(file)
        })
    })
}

module.exports = printfiles();

